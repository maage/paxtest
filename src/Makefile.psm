#!/usr/bin/make

CC ?= gcc

check_gcc = $(shell if $(CC) $(1) -S -o /dev/null -xc /dev/null > /dev/null 2>&1; \
	then echo "$(1)"; else echo "$(2)"; fi)

# PIC, for shared libraries
CC_PIC := -fPIC
LD_PIC := -shared

# forcibly enable PIE
CC_PIE := -fPIE
LD_PIE := -pie

# forcibly disable PIE
CC_EXEC := -fno-PIE
LD_EXEC := $(call check_gcc,-no-pie,$(call check_gcc,-nopie))

RUNDIR ?= .

CONTRIBDIR := ../contrib

SETPAXFLAGS := $(CONTRIBDIR)/setpaxflags

# The Hardened GCC compiler has stack protector on by default, this
# could interfere with the results of this test.
CPPFLAGS  := -U_FORTIFY_SOURCE -DRUNDIR=\"$(RUNDIR)\"
CFLAGS    := -O2 -g
CFLAGS    += $(call check_gcc,-fno-stack-protector,)
CFLAGS    += $(call check_gcc,-fno-stack-protector-all,)
CFLAGS    += $(call check_gcc,-fcf-protection=none,)
CFLAGS    += $(call check_gcc,-ftrampolines,)
LDFLAGS   :=

# append optional user provided flags
CPPFLAGS  += $(CPPFLAGS_EXTRA)
CFLAGS    += $(CFLAGS_EXTRA)
LDFLAGS   += $(LDFLAGS_EXTRA)

EXEC_TESTS    := anonmap execbss execdata execheap execstack
MPROT_TESTS   := mprotanon mprotbss mprotdata mprotheap mprotstack
MPROTSH_TESTS := mprotshbss mprotshdata writetext
SHLIB_TESTS   := shlibbss shlibdata
RAND_TESTS    := randamap randheap1 randheap2 randmain1 randmain2
RAND_TESTS    += randshlib randvdso randstack1 randstack2
RAND_TESTS    += randarg1 randarg2 randshlibdelta1 randshlibdelta2
RANDEX_TESTS  := randexhaust1 randexhaust2
RET_TESTS     := rettofunc1 rettofunc2
RETX_TESTS    := rettofunc1x rettofunc2x

TESTS := $(EXEC_TESTS) $(SHLIB_TESTS) $(MPROT_TESTS) $(MPROTSH_TESTS)
TESTS += $(RAND_TESTS) $(RANDEX_TESTS) $(RET_TESTS) $(RETX_TESTS)

UTILS_SHLIB := getshlib getshlibdelta1 getshlibdelta2

UTILS := getamap getarg1 getarg2 getexhaust1 getexhaust2 getheap1 getheap2
UTILS += getmain1 getmain2 getstack1 getstack2 getvdso $(UTILS_SHLIB)

SHLIBS := shlibtest.so shlibtest2.so

PTHREAD_TARGETS := $(EXEC_TESTS) $(MPROT_TESTS) $(MPROTSH_TESTS)
PTHREAD_TARGETS += $(SHLIB_TESTS) $(RET_TESTS) $(RETX_TESTS)
DLOPEN_TARGETS  := $(MPROTSH_TESTS) $(SHLIB_TESTS) $(UTILS_SHLIB)
SHLIB_TARGETS   := $(SHLIBS)

# build these as executables, overriding a possible default-pie
ET_EXEC_TARGETS := getheap1 getmain1 getshlibdelta1
# (recommended by PaX Team, not really a requirement)
ET_EXEC_TARGETS += $(RET_TESTS) $(RETX_TESTS)
# ensure these are build as PIE
ET_DYN_TARGETS  := getheap2 getmain2 getshlibdelta2

PAX_TARGETS_SPRXM := getmain1 getshlibdelta1
PAX_TARGETS_SPXM  := $(RETX_TESTS)
# ET_EXEC and usage of "m" is not confirmed (as in Gentoo patch)
# Adamantix does not use it
# Pax Team does not want "m" for getstack1/2
PAX_TARGETS_SRpm := getarg1 getstack1 getexhaust1 getexhaust2
# disable segmexec, kernel else overrides pageexec
PAX_TARGETS_PRsm := getarg2 getstack2


all: $(SHLIBS) $(TESTS) $(UTILS) paxtest
	$(MAKE) -f $(firstword $(MAKEFILE_LIST)) apply_pax_flags

contrib:
	$(MAKE) -C $(CONTRIBDIR)

clean:
	-$(MAKE) -C $(CONTRIBDIR) clean
	-rm -f *.o *.s *~ core
	-rm -f $(TESTS) $(UTILS) $(SHLIBS)
	-rm -f ../paxtest paxtest paxtest.log a.out dumpspecs

ifdef DESTDIR
ifdef BINDIR
ifdef RUNDIR
install: all
	mkdir -p $(DESTDIR)/$(RUNDIR)
	cp $(SHLIBS) $(TESTS) $(UTILS) $(DESTDIR)/$(RUNDIR)
	mkdir -p $(DESTDIR)/$(BINDIR)
	cp paxtest $(DESTDIR)/$(BINDIR)
	chmod 755 $(DESTDIR)/$(BINDIR)/paxtest
endif
endif
endif

paxtest: genpaxtest $(TESTS)
	$(SHELL) genpaxtest $(TESTS)
	ln -sf src/paxtest.wrap ../$@
	chmod 755 ../$@

apply_pax_flags: $(PAX_TARGETS_SPRXM) $(PAX_TARGETS_SPXM)
apply_pax_flags: $(PAX_TARGETS_SRpm) $(PAX_TARGETS_PRsm)
apply_pax_flags: | contrib
	@for p in $(PAX_TARGETS_SPRXM); do \
		$(SHELL) $(SETPAXFLAGS) SPRXM $$p; \
	done
	@for p in $(PAX_TARGETS_SPXM); do \
		$(SHELL) $(SETPAXFLAGS) SPXM $$p; \
	done
	@for p in $(PAX_TARGETS_SRpm); do \
		$(SHELL) $(SETPAXFLAGS) SRpm $$p; \
	done
	@for p in $(PAX_TARGETS_PRsm); do \
		$(SHELL) $(SETPAXFLAGS) PRsm $$p; \
	done

$(ET_DYN_TARGETS): CFLAGS  += $(CC_PIE)
$(ET_DYN_TARGETS): LDFLAGS += $(LD_PIE)
$(ET_EXEC_TARGETS): CFLAGS  += $(CC_EXEC)
$(ET_EXEC_TARGETS): LDFLAGS += $(LD_EXEC)
$(SHLIB_TARGETS): CFLAGS  += $(CC_PIC)
$(SHLIB_TARGETS): LDFLAGS += $(LD_PIC)
$(PTHREAD_TARGETS): CFLAGS += -pthread
$(PTHREAD_TARGETS): LDLIBS += -lpthread
$(DLOPEN_TARGETS): LDLIBS += -ldl

$(EXEC_TESTS) $(MPROT_TESTS) $(MPROTSH_TESTS): body.c
$(SHLIB_TESTS) $(RET_TESTS) $(RETX_TESTS): body.c
$(RAND_TESTS): randbody.c
$(RANDEX_TESTS): fastrandbody.c

%1.c: %.c
	ln -s $< $@

%2.c: %.c
	ln -s $< $@

%.so: %.o
	$(CC) $(LDFLAGS) $^ $(LDLIBS) -o $@

.PHONY: all apply_pax_flags clean contrib install
